"""
This security layer inadequately handles A/B storage for files in RepyV2.


Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

# Create Lock
mycontext['lock'] = createlock()

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file

    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # Set lock for blocking 
    mycontext['lock'].acquire(True)

    # the file already exists, open it
    if self.Afn in listfiles():
      self.Afile = openfile(self.Afn, True)
      self.Bfile = openfile(self.Bfn, True) 
      self.Bfile.writeat(self.Afile.readat(None,0),0) 

    # file does not already exist 
    else: 
      # create is true
      if create:
        # make the files and add 'SE' to the readat file...
        self.Afile = openfile(self.Afn, True)
        self.Bfile = openfile(self.Bfn, True) 
        self.Afile.writeat("SE",0)
        self.Bfile.writeat("SE",0)

      # create is not true, do nothing 
      else:
        pass

  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    fileLength = len(self.Bfile.readat(None, 0))
    
    # check to pass EOF 
    if (offset >= 0) and (offset <= fileLength):
      self.Bfile.writeat(data, offset)
    
    else:
      pass

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    try: 
      return self.Afile.readat(bytes, offset)
    
    except:
      pass

  def close(self):
    Bdata = self.Bfile.readat(None,0)

    try:
      # check if file starts with S and ends with E
      if Bdata.startswith("S") and Bdata.endswith("E"):
        self.Afile.close()
        removefile(self.Afn)
        self.Afile = openfile(self.Afn, True)
        self.Afile.writeat(Bdata, 0)

      # file does not meet the acceptable criteria 
      else:
        pass

    except:
      pass

    self.Afile.close()
    self.Bfile.close()
    removefile(self.Bfn)

    # Release Lock
    mycontext['lock'].release()

def ABopenfile(filename, create):
  return ABFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()